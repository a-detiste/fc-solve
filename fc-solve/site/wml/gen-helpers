#!/usr/bin/env perl

use strict;
use warnings;
use autodie;

use Carp               ();
use File::Find::Object ();
use Path::Tiny         qw/ path /;
use lib './lib';

sub _exec
{
    my ( $cmd, $err ) = @_;

    if ( system(@$cmd) )
    {
        Carp::confess($err);
    }
    return;
}

my $rin = path("lib/repos/rinutils-include")->absolute;

if ( not -e $rin )
{
    _exec(
        [
qq#cd lib/repos/ && ( test -e rinutils || git clone https://github.com/shlomif/rinutils ) && cd rinutils && rm -fr b && mkdir b && cd b && cmake -DWITH_TEST_SUITE=OFF -DCMAKE_INSTALL_PREFIX="$rin" .. && make && make install && cd .. && rm -fr b && cd ..#
        ],
        "rinutils"
    );
}

my $bhsolver    = path("lib/repos/black-hole-solitaire--build")->absolute;
my $bhsolversrc = path("lib/repos/black-hole-solitaire")->absolute;
my $bhsolversrcsrc =
    path("lib/repos/black-hole-solitaire/black-hole-solitaire/c-solver")
    ->absolute;

if ( not -e $bhsolver )
{
    _exec(
        [
qq#cd lib/repos/ && ( test -e black-hole-solitaire || git clone --recurse-submodules https://github.com/shlomif/black-hole-solitaire ) && mkdir "$bhsolver" && cd "$bhsolver" && cmake -DWITH_TEST_SUITE=OFF -DCMAKE_INSTALL_PREFIX="$bhsolver" "$bhsolversrcsrc" && cd ..#
        ],
        "rinutils"
    );
}

if ( not -e "lib/jquery/jquery-phoenix/" )
{
    _exec(
        [
"cd lib/jquery/ && git clone https://github.com/kugaevsky/jquery-phoenix/"

        ],
        "git clone",
    );
}
my $GAME = "Solitairey";
if ( not -e "lib/repos/$GAME" )
{
    _exec(
        [
"cd lib/repos && git clone https://github.com/foss-card-games/${GAME}.git && cd $GAME && git checkout 06023d24c7b855fcf7b739857f7be6df49974159"

        ],
        "git clone of $GAME",
    );
}
_exec( [ $^X, 'bin/gen-web-fc-solve-tests--texts-dictionary.pl' ],
    'tests-strings' )
    if not -e 'src/ts/web-fcs-tests-strings.ts';
_exec( [ $^X, 'bin/my-cookiecutter.pl' ], 'cookiecutter failed.' );
_exec( [ $^X, 'bin/gen_emcc_libs_makefile_fragments.pl' ], "emcc-libs" );
require HTML::Latemp::DocBook::GenMake;
HTML::Latemp::DocBook::GenMake->new(
    { dest_var => '$(D)', 'disable_docbook4' => 1, post_dest_var => '$(D)' } )
    ->generate;
_exec( [ "gmake", "--silent", "-f", "lib/make/build-deps/build-deps.mak" ],
    "build-deps failed!" );
_exec( [ $^X, 'bin/gen-deps-mak.pl' ], "gen-deps-mak" );
_exec( [ 'python3', 'bin/gen_listboxes.py', ], "listboxes" );

my $DIR = "lib/make/";
my @tt2;
my @dirs_paths;
my @images_paths;
my $tree = File::Find::Object->new( {}, "src" );

while ( my $r = $tree->next_obj() )
{
    my $path = join "/", @{ $r->full_components() };
    if ( $r->is_file() )
    {
        if ( $path =~ s#\.x?html\K\.tt2\z##ms )
        {
            push @tt2, $path;
        }
        elsif ( $path !~ m#(?:\~)\z#ms )
        {
            push @images_paths, $path;
        }
    }
    elsif ( $r->is_dir() and length($path) )
    {
        push @dirs_paths, $path;
    }
}
path("$DIR/tt2.txt")->spew_raw( join "\n", ( sort { $a cmp $b } @tt2 ), "" );
path("$DIR/include.mak")->spew_utf8(
    map {
        join( " ",
            uc( "SRC" . "_" . $_->[0] ),
            ":=", ( sort ( @{ $_->[1] } ) ) )
            . "\n"
    } [ "dirs", \@dirs_paths ],
    [ "images", \@images_paths ]
);

path('Makefile')->spew_utf8("include ${DIR}main.mak\n");

foreach my $p ( ['PROD=1'], [] )
{
    _exec( [ 'gmake', @$p, 'make-dirs', 'sects_cache' ], "sects_cache" );
    _exec( [ 'gmake', '-j8', @$p, 'chart-tsvs' ], "TSVs" );
}

require FreecellSolver::Site::News;

my $news = FreecellSolver::Site::News->new();
path("lib/front-page-news.htmlish")->spew_utf8( $news->render_front_page() );
path("lib/old-news.htmlish")->spew_utf8( $news->render_old() );
use FreecellSolver::ExtractGames ();
path("lib/games.htmlish")
    ->spew_utf8( FreecellSolver::ExtractGames->new->calc_html );
_exec(
    [
"markdent-html --dialect GitHub --file ../../docs/ms-freecell--windows10--mismatched-deals-indices.md > lib/msfreecell-note.htmlish"
    ],
    "markdent"
);
use FreecellSolver::GenDealsCharts1 ();
open my $out,  '>', 'lib/4fc-deals-charts.htmlish';
open my $out2, '>', 'lib/4fc-deals-charts2.htmlish';

FreecellSolver::GenDealsCharts1->gen_summary_table( { fh => $out, try2 => 1 } );
FreecellSolver::GenDealsCharts1->gen_progress_charts(
    { fh => $out, try2 => 1 } );
FreecellSolver::GenDealsCharts1->gen_summary_table(
    { fh => $out2, try2 => 0 } );
FreecellSolver::GenDealsCharts1->gen_progress_charts(
    { fh => $out2, try2 => 0 } );

close $out;
close $out2;

_exec(
    [
        "touch", "-d", "2021-10-10T10:20:00Z",
        "lib/data/mbox/fc-solve-discuss--yahoogroups.mbox"
    ],
    "mbox date for make",
);
